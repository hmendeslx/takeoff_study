#   sum_reg <- summary(regress)
#   abline(regress, col="red")
#   legend("topleft", paste("R^2 = ", round(sum_reg$r.squared,3)))
#   grid(,,"dark red")
#   dev.off()
##$## PDF reporting commented on 9 May 2020 to recover in a later stage
# PDF Reporting
#setwd(binpath)
brew("takeoff_study.brew", paste0('takeoff_study',s,".tex"))
texi2dvi(paste0('takeoff_study',s,".tex"), pdf = TRUE)
setwd(work_dir)
}
s <- 1
## LOAD Flight From List
setwd("data")
getwd()
setwd( "/home/hmendes/Projects/R/flightRtools/takeoff_study")
# Clean workspace (& environment data)
rm(list=ls(all=TRUE))
# Capture working directory
# > setwd(work_dir) ...will recover the path for the initial folder
# > setwd("nameofthefolder") ...will direct to a new folder, eg: data, output, etc.
work_dir <- getwd()
#library(ggplot2)
library(brew)
library(data.table)
#########################################################################
to_plots <- function(){
# par.print <- as.data.frame(cbind(par.names, par.descr, par.origin))
# names(par.print) <- c("Menemonic", "Description", "Origin")
#
# par.table <- print(xtable(par.print, format="latex"), include.rownames=FALSE,
#              size="scriptsize")
#
# # Lift-Off detection
# tlg <- min(which(LG_left[t0:t1]==0))
# trg <- min(which(LG_right[t0:t1]==0))
#
#   loff <- max(tlg,trg) # Lift Off according to MLG criteria
#
#   r1 <- raltd1[t0:t1]
#   r2 <- raltd2[t0:t1]
#
#   # loff radio alt correction
#   if ( r1[loff] > 1  || r2[loff] > 1) {
#
#     min <- loff - 20
#     max <- loff + 10
#
#     r1_positive <- min(which(r1[min:max]>0))
#     lo_r1 <- min + r1_positive
#
#     r2_positive <- min(which(r2[min:max]>0))
#     lo_r2 <- min + r2_positive
#
#     #lo_ralt <- min(lo_r1,lo_r2)
#     loff <- max(lo_r1,lo_r2)
# }
#
# loff_sec <- loff/8 # in seconds
# Rotation point
# rot_sample <- min(which(ptcr[t0:t1]>1))
# rotation_time <- (loff - rot_sample)/8
# rot <- rot_sample/8 # seconds
# # Values to include in the report
# # integrar mais tarde em "flight_measurements"
# flxtemp1 <- round(data_takeoff$FLX1_TEMP[rot_sample],1)
# flxtemp2 <- round(data_takeoff$FLX2_TEMP[rot_sample],1)
# tla1_pos <- data_takeoff$TLA1C[rot_sample]
# tla2_pos <- data_takeoff$TLA2C[rot_sample]
# gw_ini <- data_takeoff$GW1KG[1]
# gw_final <- data_takeoff$GW1KG[(t1-t0)+1]
# fuel_gw <- gw_ini - gw_final
time_considered <- nrows
flaps_takeoff <- flightdata$FLAPL_3[10] # correct with IF condition in case other position is used
nulltext <- "TBC"
# # calculo de consumo atrav?s do FF - comparar com o de cima
# Graphics
# Fast Testing Command:
# > with(data_takeoff, plot(FF1, N21, type="l", col="blue")); grid(,,col="dark red")
setwd(work_dir)
setwd("output")
png("GS.png")
plot(flightdata$GS,type = "l",col="blue", ylab = "Ground Speed [Kts]", xlab = "Time [sec]")
grid(,,col="red")
dev.off()
png("VERTG.png")
plot(flightdata$VERTG,type = "l",col="blue", ylab = "Vertical Acceleration [g]", xlab = "Time [sec]")
grid(,,col="red")
dev.off()
png("CAS.png")
plot(flightdata$CAS,type = "l",col="blue", ylab = "Calibrated Airspeed [Kts]", xlab = "Time [sec]")
grid(,,col="red")
dev.off()
flightdata$RALT1[which(flightdata$RALT1==4095)] <- -1
flightdata$RALT1[which(flightdata$RALT1==4094)] <- -2
flightdata$RALT1[which(flightdata$RALT1==4092)] <- -4
png("RALT1.png")
plot(flightdata$RALT1,type = "l",col="blue", ylab = "Radio Altemeter #1 [ft]", xlab = "Time [sec]")
grid(,,col="red")
dev.off()
flightdata$RALT2[which(flightdata$RALT2==4095)] <- -1
flightdata$RALT2[which(flightdata$RALT2==4094)] <- -2
flightdata$RALT2[which(flightdata$RALT2==4093)] <- -3
png("RALT2.png")
plot(flightdata$RALT2,type = "l",col="blue", ylab = "Radio Altemeter #2 [ft]", xlab = "Time [sec]")
grid(,,col="red")
dev.off()
png("PITCH.png")
plot(flightdata$PITCH,type = "l",col="blue", ylab = "Pitch [deg]", xlab = "Time [sec]")
grid(,,col="red")
dev.off()
png("PITCH_RATE.png")
plot(flightdata$PITCH_RATE,type = "l",col="blue", ylab = "Pitch Rate [deg/s]", xlab = "Time [sec]")
grid(,,col="red")
dev.off()
png("PITCH_CAPT.png")
plot(flightdata$PITCH_CAPT,type = "l",col="blue", ylab = "Pitch Command Capt", xlab = "Time [sec]")
grid(,,col="red")
dev.off()
png("PITCH_FO.png")
plot(flightdata$PITCH_FO,type = "l",col="blue", ylab = "Pitch Command FO", xlab = "Time [sec]")
grid(,,col="red")
dev.off()
png("LONG.png")
plot(flightdata$LONG,type = "l",col="blue", ylab = "Longitudinal Acceleration [g]", xlab = "Time [sec]")
grid(,,col="red")
dev.off()
png("SAT.png")
plot(flightdata$SAT,type = "l",col="blue", ylab = "Static Air Temperature [deg C]", xlab = "Time [sec]")
grid(,,col="red")
dev.off()
png("N1_1.png")
plot(flightdata$N1_1,type = "l",col="blue", ylab = "N1 Eng #1 [%]", xlab = "Time [sec]")
grid(,,col="red")
dev.off()
png("N1_2.png")
plot(flightdata$N1_2,type = "l",col="blue", ylab = "N1 Eng #2 [%]", xlab = "Time [sec]")
grid(,,col="red")
dev.off()
png("N1_3.png")
plot(flightdata$N1_3,type = "l",col="blue", ylab = "N1 Eng #3 [%]", xlab = "Time [sec]")
grid(,,col="red")
dev.off()
png("N1_4.png")
plot(flightdata$N1_4,type = "l",col="blue", ylab = "N1 Eng #4 [%]", xlab = "Time [sec]")
grid(,,col="red")
dev.off()
png("N2_1.png")
plot(flightdata$N2_1,type = "l",col="blue", ylab = "N2 Eng #1 [%]", xlab = "Time [sec]")
grid(,,col="red")
dev.off()
png("N2_2.png")
plot(flightdata$N2_2,type = "l",col="blue", ylab = "N2 Eng #2 [%]", xlab = "Time [sec]")
grid(,,col="red")
dev.off()
png("N2_3.png")
plot(flightdata$N2_3,type = "l",col="blue", ylab = "N2 Eng #3 [%]", xlab = "Time [sec]")
grid(,,col="red")
dev.off()
png("N2_4.png")
plot(flightdata$N2_4,type = "l",col="blue", ylab = "N2 Eng #4 [%]", xlab = "Time [sec]")
grid(,,col="red")
dev.off()
png("ELEV_L.png")
plot(flightdata$ELEV_L,type = "l",col="blue", ylab = "Elevator Left [deg]", xlab = "Time [sec]")
grid(,,col="red")
dev.off()
png("ELEV_R.png")
plot(flightdata$ELEV_R_A,type = "l",col="blue", ylab = "Elevator Right [deg]", xlab = "Time [sec]")
grid(,,col="red")
dev.off()
LDG_LH <- as.numeric(!as.numeric(as.factor(flightdata$LDG_LH))-1)
png("LDG_LH.png")
plot(LDG_LH,type = "l",col="blue", ylab = "Main Landing Gear Left", xlab = "Time [sec]")
grid(,,col="red")
dev.off()
LDG_RH <- as.numeric(!as.numeric(as.factor(flightdata$LDG_RH))-1)
png("LDG_RH.png")
plot(LDG_RH,type = "l",col="blue", ylab = "Main Landing Gear Right", xlab = "Time [sec]")
grid(,,col="red")
dev.off()
LDG_NOSE <- as.numeric(!as.numeric(as.factor(flightdata$LDG_NOSE))-1)
png("LDG_NOSE.png")
plot(LDG_NOSE,type = "l",col="blue", ylab = "Nose Landing Gear", xlab = "Time [sec]")
grid(,,col="red")
dev.off()
CG <- approx(seq(1:nrows), flightdata$CG,xout=c(1:nrows), method="linear",n=nrows)$y
png("CG.png")
plot(CG,type = "l",col="blue", ylab = "Centre of Gravity [%MAC]", xlab = "Time [sec]")
grid(,,col="red")
dev.off()
GW <- approx(seq(1:nrows), flightdata$GW,xout=c(1:nrows), method="linear",n=nrows)$y
png("GW.png")
plot(GW,type = "l",col="blue", ylab = "Gross Weight [Kg]", xlab = "Time [sec]")
grid(,,col="red")
dev.off()
png("landing_gear.png")
plot(LDG_LH, type="l",xlab="Time [sec]",col="blue",lwd=2)
lines(LDG_NOSE, type="l", col="black",lwd=2)
lines(LDG_RH, type="l", col="brown",lwd=2)
# abline(v=rot,col="green", lwd=2)
# abline(v=loff_sec,col="red", lwd=2)
grid(,,col="dark red")
legend("topleft",legend=c("Landing Gear Left","Landing Gear Nose","Landing Gear Right")
,col=c("blue","black","brown"),bg="light blue",lwd=1, cex=1)
dev.off()
# #################################################
# # Graphics from Correlation of several parameters
#
#   png("tla_vs_ff_eng1.png") #
#   with(data_takeoff, plot( TLA1, FF1, type="l", col="blue", lwd=1.5))
#   regress <- lm(FF1 ~ TLA1, data_takeoff)
#   sum_reg <- summary(regress)
#   abline(regress, col="red")
#   legend("topleft", paste("R^2 = ", round(sum_reg$r.squared,3)))
#   grid(,,"dark red")
#   dev.off()
#
# #  Capture information about the regression for the final report
#   line1 <- paste("\\","begin{verbatim}",sep="")
#   write(line1, file="tla_vs_ff_eng1.tex")
#   capture.output(sum_reg, file="tla_vs_ff_eng1.tex", append=TRUE)
#   line2 <- paste("\\","end{verbatim}",sep="")
#   write(line2, file="tla_vs_ff_eng1.tex", append=TRUE)
#
#   png("tla_vs_ff_eng2.png")
#   with(data_takeoff, plot( TLA2, FF2, type="l", col="blue", lwd=1.5))
#   regress <- lm(FF2 ~ TLA2, data_takeoff)
#   sum_reg <- summary(regress)
#   abline(regress, col="red")
#   legend("topleft", paste("R^2 = ", round(sum_reg$r.squared,3)))
#   grid(,,"dark red")
#   dev.off()
##$## PDF reporting commented on 9 May 2020 to recover in a later stage
# PDF Reporting
#setwd(binpath)
brew("takeoff_study.brew", paste0('takeoff_study',s,".tex"))
texi2dvi(paste0('takeoff_study',s,".tex"), pdf = TRUE)
setwd(work_dir)
}
# file list capture
setwd("data")
fileList <- list.files(path=getwd(), pattern=".csv")
s <- 1
## LOAD Flight From List
setwd("data")
source('~/Projects/R/flightRtools/takeoff_study/src/takeoff_study.R')
setwd(work_dir)
getwd()
source('~/Projects/R/flightRtools/takeoff_study/src/takeoff_study.R')
getwd()
setwd(work_dir)
getwd()
setwd("/home/hmendes/Projects/R/flightRtools/takeoff_study")
# Clean workspace (& environment data)
rm(list=ls(all=TRUE))
# Capture working directory
# > setwd(work_dir) ...will recover the path for the initial folder
# > setwd("nameofthefolder") ...will direct to a new folder, eg: data, output, etc.
work_dir <- getwd()
work_dir
#library(ggplot2)
library(brew)
library(data.table)
#########################################################################
to_plots <- function(){
# par.print <- as.data.frame(cbind(par.names, par.descr, par.origin))
# names(par.print) <- c("Menemonic", "Description", "Origin")
#
# par.table <- print(xtable(par.print, format="latex"), include.rownames=FALSE,
#              size="scriptsize")
#
# # Lift-Off detection
# tlg <- min(which(LG_left[t0:t1]==0))
# trg <- min(which(LG_right[t0:t1]==0))
#
#   loff <- max(tlg,trg) # Lift Off according to MLG criteria
#
#   r1 <- raltd1[t0:t1]
#   r2 <- raltd2[t0:t1]
#
#   # loff radio alt correction
#   if ( r1[loff] > 1  || r2[loff] > 1) {
#
#     min <- loff - 20
#     max <- loff + 10
#
#     r1_positive <- min(which(r1[min:max]>0))
#     lo_r1 <- min + r1_positive
#
#     r2_positive <- min(which(r2[min:max]>0))
#     lo_r2 <- min + r2_positive
#
#     #lo_ralt <- min(lo_r1,lo_r2)
#     loff <- max(lo_r1,lo_r2)
# }
#
# loff_sec <- loff/8 # in seconds
# Rotation point
# rot_sample <- min(which(ptcr[t0:t1]>1))
# rotation_time <- (loff - rot_sample)/8
# rot <- rot_sample/8 # seconds
# # Values to include in the report
# # integrar mais tarde em "flight_measurements"
# flxtemp1 <- round(data_takeoff$FLX1_TEMP[rot_sample],1)
# flxtemp2 <- round(data_takeoff$FLX2_TEMP[rot_sample],1)
# tla1_pos <- data_takeoff$TLA1C[rot_sample]
# tla2_pos <- data_takeoff$TLA2C[rot_sample]
# gw_ini <- data_takeoff$GW1KG[1]
# gw_final <- data_takeoff$GW1KG[(t1-t0)+1]
# fuel_gw <- gw_ini - gw_final
time_considered <- nrows
flaps_takeoff <- flightdata$FLAPL_3[10] # correct with IF condition in case other position is used
nulltext <- "TBC"
# # calculo de consumo atrav?s do FF - comparar com o de cima
# Graphics
# Fast Testing Command:
# > with(data_takeoff, plot(FF1, N21, type="l", col="blue")); grid(,,col="dark red")
setwd(work_dir)
setwd("output")
png("GS.png")
plot(flightdata$GS,type = "l",col="blue", ylab = "Ground Speed [Kts]", xlab = "Time [sec]")
grid(,,col="red")
dev.off()
png("VERTG.png")
plot(flightdata$VERTG,type = "l",col="blue", ylab = "Vertical Acceleration [g]", xlab = "Time [sec]")
grid(,,col="red")
dev.off()
png("CAS.png")
plot(flightdata$CAS,type = "l",col="blue", ylab = "Calibrated Airspeed [Kts]", xlab = "Time [sec]")
grid(,,col="red")
dev.off()
flightdata$RALT1[which(flightdata$RALT1==4095)] <- -1
flightdata$RALT1[which(flightdata$RALT1==4094)] <- -2
flightdata$RALT1[which(flightdata$RALT1==4092)] <- -4
png("RALT1.png")
plot(flightdata$RALT1,type = "l",col="blue", ylab = "Radio Altemeter #1 [ft]", xlab = "Time [sec]")
grid(,,col="red")
dev.off()
flightdata$RALT2[which(flightdata$RALT2==4095)] <- -1
flightdata$RALT2[which(flightdata$RALT2==4094)] <- -2
flightdata$RALT2[which(flightdata$RALT2==4093)] <- -3
png("RALT2.png")
plot(flightdata$RALT2,type = "l",col="blue", ylab = "Radio Altemeter #2 [ft]", xlab = "Time [sec]")
grid(,,col="red")
dev.off()
png("PITCH.png")
plot(flightdata$PITCH,type = "l",col="blue", ylab = "Pitch [deg]", xlab = "Time [sec]")
grid(,,col="red")
dev.off()
png("PITCH_RATE.png")
plot(flightdata$PITCH_RATE,type = "l",col="blue", ylab = "Pitch Rate [deg/s]", xlab = "Time [sec]")
grid(,,col="red")
dev.off()
png("PITCH_CAPT.png")
plot(flightdata$PITCH_CAPT,type = "l",col="blue", ylab = "Pitch Command Capt", xlab = "Time [sec]")
grid(,,col="red")
dev.off()
png("PITCH_FO.png")
plot(flightdata$PITCH_FO,type = "l",col="blue", ylab = "Pitch Command FO", xlab = "Time [sec]")
grid(,,col="red")
dev.off()
png("LONG.png")
plot(flightdata$LONG,type = "l",col="blue", ylab = "Longitudinal Acceleration [g]", xlab = "Time [sec]")
grid(,,col="red")
dev.off()
png("SAT.png")
plot(flightdata$SAT,type = "l",col="blue", ylab = "Static Air Temperature [deg C]", xlab = "Time [sec]")
grid(,,col="red")
dev.off()
png("N1_1.png")
plot(flightdata$N1_1,type = "l",col="blue", ylab = "N1 Eng #1 [%]", xlab = "Time [sec]")
grid(,,col="red")
dev.off()
png("N1_2.png")
plot(flightdata$N1_2,type = "l",col="blue", ylab = "N1 Eng #2 [%]", xlab = "Time [sec]")
grid(,,col="red")
dev.off()
png("N1_3.png")
plot(flightdata$N1_3,type = "l",col="blue", ylab = "N1 Eng #3 [%]", xlab = "Time [sec]")
grid(,,col="red")
dev.off()
png("N1_4.png")
plot(flightdata$N1_4,type = "l",col="blue", ylab = "N1 Eng #4 [%]", xlab = "Time [sec]")
grid(,,col="red")
dev.off()
png("N2_1.png")
plot(flightdata$N2_1,type = "l",col="blue", ylab = "N2 Eng #1 [%]", xlab = "Time [sec]")
grid(,,col="red")
dev.off()
png("N2_2.png")
plot(flightdata$N2_2,type = "l",col="blue", ylab = "N2 Eng #2 [%]", xlab = "Time [sec]")
grid(,,col="red")
dev.off()
png("N2_3.png")
plot(flightdata$N2_3,type = "l",col="blue", ylab = "N2 Eng #3 [%]", xlab = "Time [sec]")
grid(,,col="red")
dev.off()
png("N2_4.png")
plot(flightdata$N2_4,type = "l",col="blue", ylab = "N2 Eng #4 [%]", xlab = "Time [sec]")
grid(,,col="red")
dev.off()
png("ELEV_L.png")
plot(flightdata$ELEV_L,type = "l",col="blue", ylab = "Elevator Left [deg]", xlab = "Time [sec]")
grid(,,col="red")
dev.off()
png("ELEV_R.png")
plot(flightdata$ELEV_R_A,type = "l",col="blue", ylab = "Elevator Right [deg]", xlab = "Time [sec]")
grid(,,col="red")
dev.off()
LDG_LH <- as.numeric(!as.numeric(as.factor(flightdata$LDG_LH))-1)
png("LDG_LH.png")
plot(LDG_LH,type = "l",col="blue", ylab = "Main Landing Gear Left", xlab = "Time [sec]")
grid(,,col="red")
dev.off()
LDG_RH <- as.numeric(!as.numeric(as.factor(flightdata$LDG_RH))-1)
png("LDG_RH.png")
plot(LDG_RH,type = "l",col="blue", ylab = "Main Landing Gear Right", xlab = "Time [sec]")
grid(,,col="red")
dev.off()
LDG_NOSE <- as.numeric(!as.numeric(as.factor(flightdata$LDG_NOSE))-1)
png("LDG_NOSE.png")
plot(LDG_NOSE,type = "l",col="blue", ylab = "Nose Landing Gear", xlab = "Time [sec]")
grid(,,col="red")
dev.off()
CG <- approx(seq(1:nrows), flightdata$CG,xout=c(1:nrows), method="linear",n=nrows)$y
png("CG.png")
plot(CG,type = "l",col="blue", ylab = "Centre of Gravity [%MAC]", xlab = "Time [sec]")
grid(,,col="red")
dev.off()
GW <- approx(seq(1:nrows), flightdata$GW,xout=c(1:nrows), method="linear",n=nrows)$y
png("GW.png")
plot(GW,type = "l",col="blue", ylab = "Gross Weight [Kg]", xlab = "Time [sec]")
grid(,,col="red")
dev.off()
png("landing_gear.png")
plot(LDG_LH, type="l",xlab="Time [sec]",col="blue",lwd=2)
lines(LDG_NOSE, type="l", col="black",lwd=2)
lines(LDG_RH, type="l", col="brown",lwd=2)
# abline(v=rot,col="green", lwd=2)
# abline(v=loff_sec,col="red", lwd=2)
grid(,,col="dark red")
legend("topleft",legend=c("Landing Gear Left","Landing Gear Nose","Landing Gear Right")
,col=c("blue","black","brown"),bg="light blue",lwd=1, cex=1)
dev.off()
# #################################################
# # Graphics from Correlation of several parameters
#
#   png("tla_vs_ff_eng1.png") #
#   with(data_takeoff, plot( TLA1, FF1, type="l", col="blue", lwd=1.5))
#   regress <- lm(FF1 ~ TLA1, data_takeoff)
#   sum_reg <- summary(regress)
#   abline(regress, col="red")
#   legend("topleft", paste("R^2 = ", round(sum_reg$r.squared,3)))
#   grid(,,"dark red")
#   dev.off()
#
# #  Capture information about the regression for the final report
#   line1 <- paste("\\","begin{verbatim}",sep="")
#   write(line1, file="tla_vs_ff_eng1.tex")
#   capture.output(sum_reg, file="tla_vs_ff_eng1.tex", append=TRUE)
#   line2 <- paste("\\","end{verbatim}",sep="")
#   write(line2, file="tla_vs_ff_eng1.tex", append=TRUE)
#
#   png("tla_vs_ff_eng2.png")
#   with(data_takeoff, plot( TLA2, FF2, type="l", col="blue", lwd=1.5))
#   regress <- lm(FF2 ~ TLA2, data_takeoff)
#   sum_reg <- summary(regress)
#   abline(regress, col="red")
#   legend("topleft", paste("R^2 = ", round(sum_reg$r.squared,3)))
#   grid(,,"dark red")
#   dev.off()
##$## PDF reporting commented on 9 May 2020 to recover in a later stage
# PDF Reporting
#setwd(binpath)
brew("takeoff_study.brew", paste0('takeoff_study',s,".tex"))
texi2dvi(paste0('takeoff_study',s,".tex"), pdf = TRUE)
setwd(work_dir)
setwd("data")
}
# file list capture
setwd("data")
fileList <- list.files(path=getwd(), pattern=".csv")
s <- 1
s
## LOAD Flight From List
#setwd("data")
flightdata <- fread(fileList[s],sep=",",header=T, stringsAsFactors = F, verbose=FALSE,
colClasses = c(LDG_LH='character', LDG_NOSE='character', LDG_RH='character',
FLAPL_0='character', FLAPL_1='character', FLAPL_2='character',
FLAPL_3='character', FLAPL_F='character', FLIGHT_PHASE='character' ))
nrows <- NROW(flightdata)
to_plots()
getwd()
s <- 2
s
flightdata <- fread(fileList[s],sep=",",header=T, stringsAsFactors = F, verbose=FALSE,
colClasses = c(LDG_LH='character', LDG_NOSE='character', LDG_RH='character',
FLAPL_0='character', FLAPL_1='character', FLAPL_2='character',
FLAPL_3='character', FLAPL_F='character', FLIGHT_PHASE='character' ))
nrows <- NROW(flightdata)
to_plots()
source('~/Projects/R/flightRtools/takeoff_study/src/takeoff_study.R')
getwd()
setwd("/home/hmendes/Projects/R/flightRtools/takeoff_study")
source('~/Projects/R/flightRtools/takeoff_study/src/takeoff_study.R')
work_dir
source('~/Projects/R/flightRtools/takeoff_study/src/takeoff_study.R')
work_dir
setwd("/home/hmendes/Projects/R/flightRtools/takeoff_study")
source('~/Projects/R/flightRtools/takeoff_study/src/takeoff_study.R')
